[{"title":"Hello World","url":"/2022/02/23/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","categories":["test"],"tags":["hello"]},{"title":"My New Post","url":"/2022/02/24/My-New-Post/","content":"hello\n","categories":["test"],"tags":["test"]},{"title":"观鸟计划--华南植物园","url":"/2022/02/25/%E8%A7%82%E9%B8%9F%E8%AE%A1%E5%88%92-%E5%8D%8E%E5%8D%97%E6%A4%8D%E7%89%A9%E5%9B%AD/","content":"\n  f34ba2ed20ed674bb74e600a4c0d472b86a73664f7f114e9a118ac04d9842dbdd04f2fe13a6ad278073cdc108b15b7813efc954da4da7869a88af47766543968960d835d90c6d8ed32e9884a433ee638ad6c2a8af7c1e0f92ef971be9b894847a6942fe2f9a43eaf50b961810591332dd48aa59866bcece7d108b0bf25adcb3c99b53a3067bd0c0bc75575911dbc96df50d0fa8ebbe606e8cf136d2f12a0d91bd908553b7e27348f28347062003c9fc062abbd2c84766575769978ca8c4a9b3b0b39705a8709fb793bf7e4cc1ebc400ba8df0270b5dfa10130b66ac91d608b0e51ac7d9f1de3363a73bf90b9eff770dc1f97a3614c32778881bef76e40e40f427b2acda546f12a9b861a7e8b1278cd21bcd0daf5f2a87a0c46be10f55cf29f76c626a61c39b4adeff6f4bd5a81188a082a9f756431ac9430d1690bfd919832389c6627c4f45b1957dfcf0323953e970dba41c8e42f063d9d8d2465378e503167ec6d9f775ee5cff84b62f7f3ef6d5c78e00ff125cb62ee16f6abfa33340bcb4f0e6b3ca84c599905bee02d9268c3ddb2db37b1102f3bace21a534f367715954305cc8663c31510b59196d3d7c082b5c397bed30b8451973c282bd68f23e66e3720340c836618dd5c73dc280ac9ea0df087cdb00bd8e9ca344acbec3955070a9136f015d1c5181274a2fe76dcc58023d8d822e4f4769b411ec725c1bc248e489d17d0de2f343d5baa47ad2e78ff925df78ee78494638d05c072c9175fb7df31aa19107b7ff197349c137ec584e0bd6c301dfa6c60682f89c683dcdb422f9cbd83959f7c51bb17865384fc21da096ca6ec987a515c121bab9d413186944f29d51dd5b0589de34c8bfdec0c62b9ec362c91299c1cdea48f71f1356a8d83b67255e1b1105241e2259dc51508c2ad612c119820ac7143088373dc8e60e7a8a38b8281aeed09c8cc0f64c498a4aeec92770498bf147a9607fe950e715d3e8683f2209b92df1e6a0fde32ec17a3e328adea2582885baf1ec67f40032f6f4c794db441bc24f67809c60e02c588e2e3f0171f2dd0658e8479e5f2491d3865a83826174d14c363c6291b469acd517721b43c5dc1406a7ea1737e6769f86e8560a3fa8be3cd68f925a851acd3ecd009b9c529d35125933b24f970efed2e2aad70f635394891408dcb0c3da8dbc173dd94ca0613e3d715c877bf0bc4b4cac1ebaa617d8c87cc7f463ea528bb41705e62d9d3bd44bcad98f59b4ce61e3a06910f8797fe75bd75b555f6cef59d380b16c36d0cce3be0a75d872d812dc6a07bd313b8754fa15c6d36a62306acbd85f41ebeef7677a6e28a6527b3efeecb4a0cdc9800315ed76d57426f7471c6cc6388043f58aa5c38cc0d88e1eaed9a5e5015512344ba1469f67d6cb0addf758635fd86b8ddd2d68f33f8827d13976171f91c25ac1c33e87d9b01a01c178c396d29b0af326176a88e736d87ec4571efe6b527b8332988641cf08cb206cc4b0f65a19fb57182215c248b26af3f48a750a9d4bf97f54e0f186167e0f0a6e5ebdafabddc97f875d856a99a515ea47ab385aafb6ac3db5a01a4895f2840cccd82b8a2af6cf19f7714ed4fa89c4af2a43e7cf58d1c37dd73133f635a6af2546707ba9a605004205e43a1b607476213b4847d4bf63a0720a2cafd7d86be044790417e6b3ca6f8c326b840de0f03a340e7d14250916be22474f8d7adc036de30013720aa745fc869d3cb32ddc6c609391031e5c2e2ba480d77fc2d2917c891dad45e255fa24d139a43fb3886fa87d0aa03ed7460aa7d0438b271163faf8bf64e2f6fde5c410b0c7b466f8def4a1416127342a1b22f7e9a7f6daae32f898893b9c79970647ae616413e78d1b395fe702b75e854c62fd7761980dbcb152e622340483028ff605353e1353c5540d635f0030780b2cc8b5f2e3a959c333769141fd230d966494ab9afa5d884299b0185b622c135f5c5909ec4808eb0b60df4c416f6c47715f82e06dd5238b87c7a3df5404c9eb8028651d480ab0004a5e538837a80d7694cb4d5b0fe9d50e4b1639dcf8cda37a8d351430113f604077a6bc9e47e1d48f34a369868fdc90f2df676935c8eecb3b2b18cf0617b75a259e2c26e716a39f2093f5aab32004791b2d869cb7375284587a59aa0acbdde470722d2e3aefbc4d714de29500a84afd3699ec7cb73db19ce7bb3c76368918e299b497c85ae16f0eaf293f45f25979c96084498c932cfc5b77842ecbc2a29f419f1dab9ac880b94fe453d6358cdf54ecb3c328e369c9e926d04502c123a6bee3efda48f15f9ebe939b2a4202e358caf7cfbdbdb6740413b8f6f7cbb2f0db967c08fd06c81f481565b25b693d0bfdf59c7b39ca76d4f41c9afbde332cf43b775af2156a2adbaacc8b11309cf9280ca56d81d2ba16a114e8154172766c8c4188be1d5e88dc9c4aa5b591f5180379a270d511bc6fc0c0ebd204c9d58f7c3665be6a364618999e518d49cc0ae9e8401da96a736a5a2ec2ad384ab427f6f4f536730c65b7de0e50ed4942ae39272847e719216587f96801a3761b780094d18299db04cde5ff86be621eee4ff33973a811dab315a513f047c329ba963bc01ddbba59bd3cd2db29b6cda3d5ca8410ded34794764361594833a04465ddcb6b6dffea503eab090e151923eb9da24f1dc281ea1e6b986908de8e97022bb7c05fd1c5f60a259328264f2c8227a2ed181c3934b45c664766a8f25db01cfecd54058d51ba8ecd60d43057386efc61ddedb70c9b5c2d6ec5829d80aaacbdc205bd8b9034b63e18cbc439f941085bd1d557a047de18c0ed262e056c5e3a78e536a8077f64f5c10c43fc9eac46e0ce4b8a4465dd7a1c824642144a6c4ed70f37bc2ca4b51d28a1907ea070e7dbac55cad46fc2a22a48cd1a9da9da69b2e\n  \n    \n      \n      \n        Hey, password is required here.\n      \n    \n  \n\n","categories":["观鸟"],"tags":["观鸟"]},{"title":"华南植物园观鸟记录","url":"/2022/02/26/%E5%8D%8E%E5%8D%97%E6%A4%8D%E7%89%A9%E5%9B%AD%E8%A7%82%E9%B8%9F%E8%AE%B0%E5%BD%95/","content":"当天看见的鸟：\n乌鸫 家燕 白头鹎 鹊鸲 红耳鹎 暗绿绣眼鸟 长尾缝叶莺 不知名鸟 黑水鸡 铜蓝鹟\n加了两个新，先占个位\n\n乌鸫：很常见的菜鸟，日常飞来飞去在地上小碎步跑来跑去，全园分布\n\n家燕：出了地铁口之后，在一个小屋子顶部发现的，听见它的特征声音，看来春天到了呢\n\n白头鹎：也是全园的菜鸟，我看见它在水边的树之间飞来飞去，和它一样飞来飞去的还有绣眼\n\n鹊鸲：老朋友了\n\n红耳鹎：老朋友了，毛绒绒球好可爱！有棵树上很多，四五只左右\n\n暗绿绣眼鸟：它在啄花，把喙探进花蕊中，感觉像是在吃花蜜，拍到它在樱花树上蹦来蹦去啄花\n\n长尾缝叶莺：很小一只！大概跟绣眼差不多大小，在地上蹦来蹦去，几乎每一步都是跳的，大概是在啄食草地上的草籽\n\n黑水鸡：在水生植物区附近的河里看见它，别人叫它水鸭，【其实它是水鸡】\n\n不知名鸟：四只，翅膀棕色，喉部深色，黑色，腹部明亮的类似白色，好像有斑纹，也是很小，可能跟麻雀一样大，四只一起行动的，目前怀疑是斑文鸟\n\n铜蓝鹟：全体亮蓝色，眼先黑色，是雄性铜蓝鹟，其实我拍得很糊，但是看的时候直觉是铜蓝鹟，后面说园区有铜蓝鹟的分布，所以大胆推测是铜蓝鹟。它的飞行轨迹比较特别，近距离飞行的时候是那种比较大弧度的滑行。\n​    铜蓝鹟的发现还是因为看见有一群拍鸟大爷举着”长枪大炮“对着一个地方，一般出现这种情况，必是有稀有鸟类。所以找鸟，找什么啊，找人就行了（流汗黄豆）\n​    然后路过一个地方的时候发现一群拍鸟大爷对着一个地方拍，还在用扬声器播放着一种鸟类的声音，这种策略大概是想利用鸟类的叫声把那只鸟吸引过来，有些鸟类会对叫声敏感，所以在鸟类网站上有些鸟类的叫声被禁止公开。我录音了那个拍鸟用的声音，然后匹配出来的结果是小白腰雨燕，匹配相似度百分之98%，是不是就是用的训练集（狗头）。这个鸟显示在广东有分布，但是平时比较少见。我没有见到那个鸟，因为太小了，而且比较警惕。（不是啊，这么多人围着不害怕才怪吧啊啊啊）\n​\n\n\n听见的鸟：\n噪鹃 大拟啄木鸟 珠颈斑鸠\n\n噪鹃：就是很大声的kwolkwol穿透力极强，有种幽怨感\n\n大拟啄木鸟：第一次听到这个叫声，像猴子，和kwol有点像，但是还是有区别，它是单音节的，是┗|｀O′|┛ 嗷↗❗❗ （循环）又大声又有力，推测这种鸟喜欢栖息在高大的树木上，就是那种参天大树，因为每次听到这种叫声，过去看，都感觉是在参天大树上传下来的。\n后续：猜对了\n“常栖于高树顶部” “洞口距离地面3到18米” 也就是洞会在2到7楼左右 “go-o”\n\n\n珠颈斑鸠：咕➡咕↗咕↘，咕❕ 【循环】\n\n\n","tags":["观鸟"]},{"title":"Java的安装和环境配置","url":"/2022/03/03/Java%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","content":"Java的安装和环境配置\nJava Downloads | Oracle\n去Oracle官网，找到Java下载\n\n选择Java8下载JDK8\nx86表示适用于32位的电脑，x64适用于64位的电脑\n需要先登录账号才能下载，如果没有账号就需要注册一个。\n下载完之后双击安装\n记住选择安装的路径\n如果是默认安装路径，应该是C:\\Program Files\\Java\n\n设置→\n\n\n\n\n新建系统变量，变量名为JAVA_HOME，变量值为JDK的安装根目录\n\n也就是这里\n\n编辑PATH\n\n\n编辑PATH变量，将刚刚新建的JAVA_HOME变量加上bin目录设置到PATH\n\n或者是这种形式的\n\n把%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;加到后面就行，注意不要漏掉分号。\nwin+R打开cmd\n\n在命令行中分别输入java -version ,java,javac，若都出现下面，说明已安装成功。\n\n\n​    \n","tags":["Java"]},{"title":"Android Studio两个gradle文件","url":"/2022/03/03/Android-Studio%E4%B8%A4%E4%B8%AAgradle%E6%96%87%E4%BB%B6/","content":"Android Studio 是用gradle来构建项目的。创建项目时会有两个build.gradle文件，一个在最外层，一个在app目录下。\n\n最外层目录的build.gradle：// Top-level build file where you can add configuration options common to all sub-projects/modules.buildscript &#123;    repositories &#123;        google()        mavenCentral()    &#125;    dependencies &#123;        classpath &quot;com.android.tools.build:gradle:7.0.4&quot;        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10&quot;        // NOTE: Do not place your application dependencies here; they belong        // in the individual module build.gradle files    &#125;&#125;task clean(type: Delete) &#123;    delete rootProject.buildDir&#125;\n\n\n\nrepositoriesrepositories的闭包中声明了   google() mavenCentral()，两者分别对应了一个代码仓库，google仓库中包含的主要是Google的扩展依赖库，mavenCentral仓库中是一些第三方开源库，声明两行配置后项目可以引用Google和mavenCentral仓库中的依赖库。\nrepositories &#123;    google()    mavenCentral()&#125;\n\n\nmaven仓库有两种，mavenCenter()和jCenter():\n\nMaven Central 则是由sonatype.org维护的Maven仓库。\n\nhttp://jcenter.bintray.com/\n\njcenter是一个由 bintray.com维护的Maven仓库。可以在这里看到整个仓库的内容。\n\n https://oss.sonatype.org/content/repositories/releases/\n\nmaven中央仓库已经将内容浏览功能禁掉了，可在这个网站查询。\n\n http://search.maven.org/\nJCenter() 与 mavenCenter()在完全不同的服务器上维护，由不同的人提供内容，两者之间毫无关系。在jcenter上有的可能 Maven Central 上没有，反之亦然。\n\ndependenciesdependencies闭包中使用classpath声明了两个插件：一个Gradle插件和一个Kotlin插件。如果想要Gradle来构建Android项目，要声明这个插件。用Kotlin插件表示目前项目是用Kotlin开发，如果是Java版的Android项目就不需要声明这个Kotlin插件。\ndependencies &#123;\n    classpath &quot;com.android.tools.build:gradle:7.0.4&quot;\n    classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10&quot;\n&#125;\n\napp目录下的build.gradle文件：plugins &#123;    id &#x27;com.android.application&#x27;    id &#x27;kotlin-android&#x27;&#125;android &#123;    compileSdk 31    defaultConfig &#123;        applicationId &quot;com.example.kotlinpractice&quot;        minSdk 21        targetSdk 32        versionCode 1        versionName &quot;1.0&quot;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;    &#125;    buildTypes &#123;        release &#123;            minifyEnabled false            proguardFiles getDefaultProguardFile(&#x27;proguard-android-optimize.txt&#x27;), &#x27;proguard-rules.pro&#x27;        &#125;    &#125;    compileOptions &#123;        sourceCompatibility JavaVersion.VERSION_1_8        targetCompatibility JavaVersion.VERSION_1_8    &#125;    kotlinOptions &#123;        jvmTarget = &#x27;1.8&#x27;    &#125;&#125;dependencies &#123;    implementation &#x27;androidx.core:core-ktx:1.3.2&#x27;    implementation &#x27;androidx.appcompat:appcompat:1.2.0&#x27;    implementation &#x27;com.google.android.material:material:1.3.0&#x27;    implementation &#x27;androidx.constraintlayout:constraintlayout:2.0.4&#x27;    testImplementation &#x27;junit:junit:4.+&#x27;    androidTestImplementation &#x27;androidx.test.ext:junit:1.1.2&#x27;    androidTestImplementation &#x27;androidx.test.espresso:espresso-core:3.3.0&#x27;&#125;\n\npluginsplugins &#123;    id &#x27;com.android.application&#x27;    id &#x27;kotlin-android&#x27;&#125;\n\n此处用了两个插件，com.android.application表示这是一个应用程序模块，这里还可以选一个值：com.android.library，表示这是一个库模块。二者最大区别是应用程序模块是可以直接运行的，库模块只能作为代码库依附于别的应用程序模块来运行。\n第二个插件kotlin-android，如果用kotlin开发Android项目，这个插件是必须的。\nandroid compileSdk 31用于指定项目编译版本，这里31表示用Android 12.0系统的SDK编译。\n\ndefaultConfig闭包\napplicationId每一个应用的唯一标识符，绝对不能重复，默认使用创建项目时候的包名，后面想改可以在这里改。\nminSdk用于指定项目最低兼容的Android版本，指定为21说明最低兼容到Android 5.0\ntargetSdk\nversionCode项目版本号\nversionName项目版本名\ntestInstrumentationRunner在当前项目中启用JUnit测试。可以为当前项目编写测试用例。\n\nbuildTypes闭包用于指定生成安装文件的相关配置，通常有两个子闭包：debug 、release\n\ndebug 用于指定生成测试版安装文件的配置，可以忽略不写\n\nrelease用于指定生成正式版安装文件的配置。\nrelease闭包中的具体内容\n\nminifyEnabled 用于指定是否对项目代码进行混淆，true：混淆   false：不混淆\n\nproguardFiles用于指定混淆时使用的规则文件，这里指定两个文件\n\nproguard-android-optimize.txt在&#x2F;tools&#x2F;proguard目录下的里面是所有项目通用混淆规则\nproguard-rules.pro在当前项目下，可以编写当前项目特有的混淆规则\n\n\n\n\n通过Android Studio直接运行项目生成的都是测试版安装文件\n\n\ndependencies闭包指定当前项目所有依赖关系\n一般Android Studio有三种依赖方式：本地依赖、远程依赖、库依赖\n\n本地依赖：对本地jar包或目录添加依赖关系\n库依赖：对项目中的库模块添加依赖\n远程依赖：可以对jcenter仓库上的开源项目添加依赖关系\n\n参考：《第一行代码》、JCenter() 与 mavenCenter() 的区别_小二的茶馆-CSDN博客_jcenter\n","tags":["Android"]}]